// Code generated by mockery v2.14.0. DO NOT EDIT.

package repository

import (
	models "app/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RepoEntityMock is an autogenerated mock type for the RepoEntityMock type
type RepoEntityMock struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, obj
func (_m *RepoEntityMock) Add(ctx context.Context, obj *models.Entity) error {
	ret := _m.Called(ctx, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Entity) error); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *RepoEntityMock) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *RepoEntityMock) GetAll(ctx context.Context) ([]*models.Entity, error) {
	ret := _m.Called(ctx)

	var r0 []*models.Entity
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Entity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Entity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForID provides a mock function with given fields: ctx, id
func (_m *RepoEntityMock) GetForID(ctx context.Context, id string) (*models.Entity, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Entity
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Entity); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Entity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, obj
func (_m *RepoEntityMock) Update(ctx context.Context, id string, obj *models.Entity) error {
	ret := _m.Called(ctx, id, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Entity) error); ok {
		r0 = rf(ctx, id, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepoEntity interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoEntity creates a new instance of RepoEntityMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoEntity(t mockConstructorTestingTNewRepoEntity) *RepoEntityMock {
	mock := &RepoEntityMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
